---
description: 
globs: 
alwaysApply: true
---
# Reka UI Components in Nimiq Developer Center

This project uses **Reka UI** (version ^2.3.1) for unstyled, accessible Vue components. All imports follow a consistent namespaced pattern and are styled with UnoCSS.

> **Related Rules**: Reka UI integrates with [UnoCSS conventions](mdc:.cursor/rules/unocss-usage.mdc) for styling, [Nimiq theme](mdc:.cursor/rules/nimiq-vitepress-theme.mdc) for complete component ecosystem, and [fluid spacing](mdc:.cursor/rules/fluid-spacing.mdc) for responsive design.

## Import Pattern
```javascript
import { ComponentName } from 'reka-ui/namespaced'
```

**Key insight**: Always use `/namespaced` import path, which provides dot-notation component access (e.g., `Dialog.Root`, `Tabs.Trigger`).

## Components in Use

### Toast ([Toast.vue](mdc:.vitepress/theme/components/Toast.vue))
- **Structure**: `Toast.Provider` → `Toast.Root` → `Toast.Title` + `Toast.Viewport`
- **Pattern**: Uses `v-model:open` for state control
- **Styling**: UnoCSS attributify (`px-16 py-8 rounded-full`) + custom CSS animations
- **Data attributes**: Leverages `[data-state]` and `[data-swipe]` for styling states

### Dialog ([FeedbackWidget.vue](mdc:.vitepress/theme/components/FeedbackWidget.vue))
- **Structure**: `Dialog.Root` → `Dialog.Trigger` + `Dialog.Portal` → `Dialog.Overlay` + `Dialog.Content` + `Dialog.Close`
- **Pattern**: Uses `v-model:open` and `as-child` prop for custom trigger styling
- **Portal**: Modal content rendered via `Dialog.Portal` for proper z-index layering
- **Positioning**: Fixed positioning with UnoCSS (`fixed bottom-16 right-16`)

### Tabs ([RpcMethod.vue](mdc:.vitepress/theme/components/Rpc/RpcMethod.vue))
- **Structure**: `Tabs.Root` → `Tabs.List` → `Tabs.Trigger` + `Tabs.Content`
- **Pattern**: Uses `v-model` for active tab control
- **Styling**: Custom `reka-active:` prefix for active states (e.g., `reka-active:text-blue`)
- **Content**: Each `Tabs.Content` matches `:value` prop from corresponding `Tabs.Trigger`

### Accordion ([RpcPlayground.vue](mdc:.vitepress/theme/components/Rpc/RpcPlayground.vue))
- **Structure**: `Accordion.Root` → `Accordion.Item` → `Accordion.Trigger` + `Accordion.Content`
- **Pattern**: `type="multiple"` allows multiple items open, `:collapsible="true"` enables closing
- **Animation**: Custom `un-animate-accordion` utility with `reka-open:` and `reka-closed:` states
- **Icons**: Chevron rotation with `reka-open:rotate-90` for visual feedback

### Popover ([RpcPlayground.vue](mdc:.vitepress/theme/components/Rpc/RpcPlayground.vue))
- **Structure**: `Popover.Root` → `Popover.Trigger` + `Popover.Portal` → `Popover.Content` + `Popover.Close`
- **Positioning**: Uses `:collision-padding`, `side`, `:side-offset` for smart positioning
- **Animation**: Enter/exit with `reka-open:animate-in` and `reka-close:animate-out`

## Common Patterns

1. **State management**: Most components use `v-model:open` or `v-model` for two-way binding
2. **Styling approach**: Pure UnoCSS attributify syntax + Reka-specific state prefixes
3. **Custom triggers**: `as-child` prop allows wrapping custom elements with component behavior
4. **Portal usage**: Modal-like components (Dialog, Popover) use Portal for proper rendering
5. **Animation states**: Leverage `reka-*:` prefixes for state-based styling

## Styling Integration

> **For complete UnoCSS patterns**: See [UnoCSS conventions](mdc:.cursor/rules/unocss-usage.mdc)

### Reka State Prefixes
Via `presetOnmax`, we have different variants that are made for Reka UI:
- **Active states**: `reka-active:color-blue`, `reka-active:bg-neutral`
- **Open states**: `reka-open:rotate-90`, `reka-open:animate-in`
- **Close states**: `reka-close:animate-out`, `reka-closed:up`
- **Data attributes**: Style `[data-state]`, `[data-swipe]` directly in CSS when needed

### Responsive Design
Combine Reka UI with [fluid spacing](mdc:.cursor/rules/fluid-spacing.mdc):
```html
<Dialog.Content f-p-xl f-rounded-lg>
  <Dialog.Title text="f-xl" f-mb-md>Modal Title</Dialog.Title>
  <Dialog.Description text="f-base">Modal content</Dialog.Description>
</Dialog.Content>
```

## Implementation Tips

1. **Import pattern**: Always import from `reka-ui/namespaced` for dot-notation access
2. **Styling approach**: Use [UnoCSS attributify](mdc:.cursor/rules/unocss-usage.mdc), avoid separate CSS unless animations are needed
3. **Custom triggers**: Leverage `as-child` when you need custom styling on triggers
4. **Portal rendering**: Remember that Portals render outside normal DOM flow—useful for modals
5. **State styling**: Reka state prefixes (`reka-*:`) work seamlessly with UnoCSS
6. **Theme integration**: Combines well with [Nimiq theme components](mdc:.cursor/rules/nimiq-vitepress-theme.mdc) for complete UI
